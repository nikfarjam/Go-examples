// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: logevnt.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogEventClient is the client API for LogEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogEventClient interface {
	Start(ctx context.Context, in *StartEventRequest, opts ...grpc.CallOption) (*StartEventResponse, error)
	Event(ctx context.Context, opts ...grpc.CallOption) (LogEvent_EventClient, error)
	End(ctx context.Context, in *EndEventRequest, opts ...grpc.CallOption) (*EndEventResponse, error)
}

type logEventClient struct {
	cc grpc.ClientConnInterface
}

func NewLogEventClient(cc grpc.ClientConnInterface) LogEventClient {
	return &logEventClient{cc}
}

func (c *logEventClient) Start(ctx context.Context, in *StartEventRequest, opts ...grpc.CallOption) (*StartEventResponse, error) {
	out := new(StartEventResponse)
	err := c.cc.Invoke(ctx, "/LogEvent/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logEventClient) Event(ctx context.Context, opts ...grpc.CallOption) (LogEvent_EventClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogEvent_ServiceDesc.Streams[0], "/LogEvent/Event", opts...)
	if err != nil {
		return nil, err
	}
	x := &logEventEventClient{stream}
	return x, nil
}

type LogEvent_EventClient interface {
	Send(*LogEventRequest) error
	CloseAndRecv() (*LogEventResponse, error)
	grpc.ClientStream
}

type logEventEventClient struct {
	grpc.ClientStream
}

func (x *logEventEventClient) Send(m *LogEventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logEventEventClient) CloseAndRecv() (*LogEventResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LogEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logEventClient) End(ctx context.Context, in *EndEventRequest, opts ...grpc.CallOption) (*EndEventResponse, error) {
	out := new(EndEventResponse)
	err := c.cc.Invoke(ctx, "/LogEvent/End", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogEventServer is the server API for LogEvent service.
// All implementations must embed UnimplementedLogEventServer
// for forward compatibility
type LogEventServer interface {
	Start(context.Context, *StartEventRequest) (*StartEventResponse, error)
	Event(LogEvent_EventServer) error
	End(context.Context, *EndEventRequest) (*EndEventResponse, error)
	mustEmbedUnimplementedLogEventServer()
}

// UnimplementedLogEventServer must be embedded to have forward compatible implementations.
type UnimplementedLogEventServer struct {
}

func (UnimplementedLogEventServer) Start(context.Context, *StartEventRequest) (*StartEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedLogEventServer) Event(LogEvent_EventServer) error {
	return status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedLogEventServer) End(context.Context, *EndEventRequest) (*EndEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method End not implemented")
}
func (UnimplementedLogEventServer) mustEmbedUnimplementedLogEventServer() {}

// UnsafeLogEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogEventServer will
// result in compilation errors.
type UnsafeLogEventServer interface {
	mustEmbedUnimplementedLogEventServer()
}

func RegisterLogEventServer(s grpc.ServiceRegistrar, srv LogEventServer) {
	s.RegisterService(&LogEvent_ServiceDesc, srv)
}

func _LogEvent_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogEventServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LogEvent/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogEventServer).Start(ctx, req.(*StartEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogEvent_Event_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogEventServer).Event(&logEventEventServer{stream})
}

type LogEvent_EventServer interface {
	SendAndClose(*LogEventResponse) error
	Recv() (*LogEventRequest, error)
	grpc.ServerStream
}

type logEventEventServer struct {
	grpc.ServerStream
}

func (x *logEventEventServer) SendAndClose(m *LogEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logEventEventServer) Recv() (*LogEventRequest, error) {
	m := new(LogEventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LogEvent_End_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogEventServer).End(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LogEvent/End",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogEventServer).End(ctx, req.(*EndEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogEvent_ServiceDesc is the grpc.ServiceDesc for LogEvent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogEvent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LogEvent",
	HandlerType: (*LogEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _LogEvent_Start_Handler,
		},
		{
			MethodName: "End",
			Handler:    _LogEvent_End_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Event",
			Handler:       _LogEvent_Event_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "logevnt.proto",
}
